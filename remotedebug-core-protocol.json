{
  "version": {
    "major": 1,
    "minor": 1
  },
  "domains": [
    {
      "domain": "ApplicationCache",
      "hidden": false,
      "commands": [
        {
          "name": "enable",
          "description": "Enables application cache domain notifications."
        },
        {
          "name": "getApplicationCacheForFrame",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Page.FrameId",
              "description": "Identifier of the frame containing document whose application cache is retrieved."
            }
          ],
          "returns": [
            {
              "name": "applicationCache",
              "$ref": "ApplicationCache",
              "description": "Relevant application cache data for the document in given frame."
            }
          ],
          "description": "Returns relevant application cache data for the document in given frame."
        },
        {
          "name": "getFramesWithManifests",
          "returns": [
            {
              "name": "frameIds",
              "type": "array",
              "items": {
                "$ref": "FrameWithManifest"
              },
              "description": "Array of frame identifiers with manifest urls for each frame containing a document associated with some application cache."
            }
          ],
          "description": "Returns array of frame identifiers with manifest urls for each frame containing a document associated with some application cache."
        },
        {
          "name": "getManifestForFrame",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Page.FrameId",
              "description": "Identifier of the frame containing document whose manifest is retrieved."
            }
          ],
          "returns": [
            {
              "name": "manifestURL",
              "type": "string",
              "description": "Manifest URL for document in the given frame."
            }
          ],
          "description": "Returns manifest URL for document in the given frame."
        }
      ],
      "events": [
        {
          "name": "applicationCacheStatusUpdated",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Page.FrameId",
              "description": "Identifier of the frame containing document whose application cache updated status."
            },
            {
              "name": "manifestURL",
              "type": "string",
              "description": "Manifest URL."
            },
            {
              "name": "status",
              "type": "integer",
              "description": "Updated application cache status."
            }
          ]
        },
        {
          "name": "networkStateUpdated",
          "parameters": [
            {
              "name": "isNowOnline",
              "type": "boolean"
            }
          ]
        }
      ],
      "types": [
        {
          "name": "applicationCacheStatusUpdated",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Page.FrameId",
              "description": "Identifier of the frame containing document whose application cache updated status."
            },
            {
              "name": "manifestURL",
              "type": "string",
              "description": "Manifest URL."
            },
            {
              "name": "status",
              "type": "integer",
              "description": "Updated application cache status."
            }
          ]
        },
        {
          "name": "networkStateUpdated",
          "parameters": [
            {
              "name": "isNowOnline",
              "type": "boolean"
            }
          ]
        }
      ]
    },
    {
      "domain": "CSS",
      "hidden": false,
      "commands": [
        {
          "name": "addRule",
          "parameters": [
            {
              "name": "styleSheetId",
              "$ref": "StyleSheetId",
              "description": "The css style sheet identifier where a new rule should be inserted."
            },
            {
              "name": "ruleText",
              "type": "string",
              "description": "The text of a new rule."
            },
            {
              "name": "location",
              "$ref": "SourceRange",
              "description": "Text position of a new rule in the target style sheet."
            }
          ],
          "returns": [
            {
              "name": "rule",
              "$ref": "CSSRule",
              "description": "The newly created rule."
            }
          ],
          "description": "Inserts a new rule with the given <code>ruleText</code> in a stylesheet with given <code>styleSheetId</code>, at the position specified by <code>location</code>."
        },
        {
          "name": "disable",
          "description": "Disables the CSS agent for the given page."
        },
        {
          "name": "enable",
          "async": true,
          "description": "Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been enabled until the result of this command is received."
        },
        {
          "name": "forcePseudoState",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "DOM.NodeId",
              "description": "The element id for which to force the pseudo state."
            },
            {
              "name": "forcedPseudoClasses",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "active",
                  "focus",
                  "hover",
                  "visited"
                ]
              },
              "description": "Element pseudo classes to force when computing the element's style."
            }
          ],
          "description": "Ensures that the given node will have specified pseudo-classes whenever its style is computed by the browser."
        },
        {
          "name": "getComputedStyleForNode",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "DOM.NodeId"
            }
          ],
          "returns": [
            {
              "name": "computedStyle",
              "type": "array",
              "items": {
                "$ref": "CSSComputedStyleProperty"
              },
              "description": "Computed style for the specified DOM node."
            }
          ],
          "description": "Returns the computed style for a DOM node identified by <code>nodeId</code>."
        },
        {
          "name": "getInlineStylesForNode",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "DOM.NodeId"
            }
          ],
          "returns": [
            {
              "name": "inlineStyle",
              "$ref": "CSSStyle",
              "optional": true,
              "description": "Inline style for the specified DOM node."
            },
            {
              "name": "attributesStyle",
              "$ref": "CSSStyle",
              "optional": true,
              "description": "Attribute-defined element style (e.g. resulting from \"width=20 height=100%\")."
            }
          ],
          "description": "Returns the styles defined inline (explicitly in the \"style\" attribute and implicitly, using DOM attributes) for a DOM node identified by <code>nodeId</code>."
        },
        {
          "name": "getMatchedStylesForNode",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "DOM.NodeId"
            }
          ],
          "returns": [
            {
              "name": "inlineStyle",
              "$ref": "CSSStyle",
              "optional": true,
              "description": "Inline style for the specified DOM node."
            },
            {
              "name": "attributesStyle",
              "$ref": "CSSStyle",
              "optional": true,
              "description": "Attribute-defined element style (e.g. resulting from \"width=20 height=100%\")."
            },
            {
              "name": "matchedCSSRules",
              "type": "array",
              "items": {
                "$ref": "RuleMatch"
              },
              "optional": true,
              "description": "CSS rules matching this node, from all applicable stylesheets."
            },
            {
              "name": "pseudoElements",
              "type": "array",
              "items": {
                "$ref": "PseudoElementMatches"
              },
              "optional": true,
              "description": "Pseudo style matches for this node."
            },
            {
              "name": "inherited",
              "type": "array",
              "items": {
                "$ref": "InheritedStyleEntry"
              },
              "optional": true,
              "description": "A chain of inherited styles (from the immediate node parent up to the DOM tree root)."
            },
            {
              "name": "cssKeyframesRules",
              "type": "array",
              "items": {
                "$ref": "CSSKeyframesRule"
              },
              "optional": true,
              "description": "A list of CSS keyframed animations matching this node."
            }
          ],
          "description": "Returns requested styles for a DOM node identified by <code>nodeId</code>."
        },
        {
          "name": "getStyleSheetText",
          "parameters": [
            {
              "name": "styleSheetId",
              "$ref": "StyleSheetId"
            }
          ],
          "returns": [
            {
              "name": "text",
              "type": "string",
              "description": "The stylesheet text."
            }
          ],
          "description": "Returns the current textual content and the URL for a stylesheet."
        },
        {
          "name": "setRuleSelector",
          "parameters": [
            {
              "name": "styleSheetId",
              "$ref": "StyleSheetId"
            },
            {
              "name": "range",
              "$ref": "SourceRange"
            },
            {
              "name": "selector",
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "selectorList",
              "$ref": "SelectorList",
              "description": "The resulting selector list after modification."
            }
          ],
          "description": "Modifies the rule selector."
        },
        {
          "name": "setStyleSheetText",
          "parameters": [
            {
              "name": "styleSheetId",
              "$ref": "StyleSheetId"
            },
            {
              "name": "text",
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "sourceMapURL",
              "type": "string",
              "optional": true,
              "description": "URL of source map associated with script (if any)."
            }
          ],
          "description": "Sets the new stylesheet text."
        }
      ],
      "events": [
        {
          "name": "mediaQueryResultChanged",
          "description": "Fires whenever a MediaQuery result changes (for example, after a browser window has been resized.) The current implementation considers only viewport-dependent media features."
        },
        {
          "name": "styleSheetChanged",
          "parameters": [
            {
              "name": "styleSheetId",
              "$ref": "StyleSheetId"
            }
          ],
          "description": "Fired whenever a stylesheet is changed as a result of the client operation."
        }
      ],
      "types": [
        {
          "name": "mediaQueryResultChanged",
          "description": "Fires whenever a MediaQuery result changes (for example, after a browser window has been resized.) The current implementation considers only viewport-dependent media features."
        },
        {
          "name": "styleSheetChanged",
          "parameters": [
            {
              "name": "styleSheetId",
              "$ref": "StyleSheetId"
            }
          ],
          "description": "Fired whenever a stylesheet is changed as a result of the client operation."
        }
      ]
    },
    {
      "domain": "DOM",
      "hidden": false,
      "commands": [
        {
          "name": "discardSearchResults",
          "parameters": [
            {
              "name": "searchId",
              "type": "string",
              "description": "Unique search session identifier."
            }
          ],
          "description": "Discards search results from the session with the given id. <code>getSearchResults</code> should no longer be called for that search.",
          "hidden": true
        },
        {
          "name": "focus",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to focus."
            }
          ],
          "description": "Focuses the given element.",
          "hidden": true
        },
        {
          "name": "getAttributes",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to retrieve attibutes for."
            }
          ],
          "returns": [
            {
              "name": "attributes",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An interleaved array of node attribute names and values."
            }
          ],
          "description": "Returns attributes for the specified node."
        },
        {
          "name": "getDocument",
          "returns": [
            {
              "name": "root",
              "$ref": "Node",
              "description": "Resulting node."
            }
          ],
          "description": "Returns the root DOM node to the caller."
        },
        {
          "name": "getOuterHTML",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to get markup for."
            }
          ],
          "returns": [
            {
              "name": "outerHTML",
              "type": "string",
              "description": "Outer HTML markup."
            }
          ],
          "description": "Returns node's HTML markup."
        },
        {
          "name": "getSearchResults",
          "parameters": [
            {
              "name": "searchId",
              "type": "string",
              "description": "Unique search session identifier."
            },
            {
              "name": "fromIndex",
              "type": "integer",
              "description": "Start index of the search result to be returned."
            },
            {
              "name": "toIndex",
              "type": "integer",
              "description": "End index of the search result to be returned."
            }
          ],
          "returns": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "Ids of the search result nodes."
            }
          ],
          "description": "Returns search results from given <code>fromIndex</code> to given <code>toIndex</code> from the sarch with the given identifier.",
          "hidden": true
        },
        {
          "name": "hideHighlight",
          "description": "Hides DOM node highlight."
        },
        {
          "name": "highlightFrame",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "Page.FrameId",
              "description": "Identifier of the frame to highlight."
            },
            {
              "name": "contentColor",
              "$ref": "RGBA",
              "optional": true,
              "description": "The content box highlight fill color (default: transparent)."
            },
            {
              "name": "contentOutlineColor",
              "$ref": "RGBA",
              "optional": true,
              "description": "The content box highlight outline color (default: transparent)."
            }
          ],
          "description": "Highlights owner element of the frame with given id.",
          "hidden": true
        },
        {
          "name": "highlightNode",
          "parameters": [
            {
              "name": "highlightConfig",
              "$ref": "HighlightConfig",
              "description": "A descriptor for the highlight appearance."
            },
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "optional": true,
              "description": "Identifier of the node to highlight."
            },
            {
              "name": "backendNodeId",
              "$ref": "BackendNodeId",
              "optional": true,
              "description": "Identifier of the backend node to highlight."
            },
            {
              "name": "objectId",
              "$ref": "Runtime.RemoteObjectId",
              "optional": true,
              "description": "JavaScript object id of the node to be highlighted.",
              "hidden": true
            }
          ],
          "description": "Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified."
        },
        {
          "name": "highlightQuad",
          "parameters": [
            {
              "name": "quad",
              "$ref": "Quad",
              "description": "Quad to highlight"
            },
            {
              "name": "color",
              "$ref": "RGBA",
              "optional": true,
              "description": "The highlight fill color (default: transparent)."
            },
            {
              "name": "outlineColor",
              "$ref": "RGBA",
              "optional": true,
              "description": "The highlight outline color (default: transparent)."
            }
          ],
          "description": "Highlights given quad. Coordinates are absolute with respect to the main frame viewport.",
          "hidden": true
        },
        {
          "name": "highlightRect",
          "parameters": [
            {
              "name": "x",
              "type": "integer",
              "description": "X coordinate"
            },
            {
              "name": "y",
              "type": "integer",
              "description": "Y coordinate"
            },
            {
              "name": "width",
              "type": "integer",
              "description": "Rectangle width"
            },
            {
              "name": "height",
              "type": "integer",
              "description": "Rectangle height"
            },
            {
              "name": "color",
              "$ref": "RGBA",
              "optional": true,
              "description": "The highlight fill color (default: transparent)."
            },
            {
              "name": "outlineColor",
              "$ref": "RGBA",
              "optional": true,
              "description": "The highlight outline color (default: transparent)."
            }
          ],
          "description": "Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport."
        },
        {
          "name": "markUndoableState",
          "description": "Marks last undoable state.",
          "hidden": true
        },
        {
          "name": "moveTo",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to move."
            },
            {
              "name": "targetNodeId",
              "$ref": "NodeId",
              "description": "Id of the element to drop the moved node into."
            },
            {
              "name": "insertBeforeNodeId",
              "$ref": "NodeId",
              "optional": true,
              "description": "Drop node before this one (if absent, the moved node becomes the last child of <code>targetNodeId</code>)."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "New id of the moved node."
            }
          ],
          "description": "Moves node into the new container, places it before the given anchor."
        },
        {
          "name": "performSearch",
          "parameters": [
            {
              "name": "query",
              "type": "string",
              "description": "Plain text or query selector or XPath search query."
            },
            {
              "name": "includeUserAgentShadowDOM",
              "type": "boolean",
              "optional": true,
              "description": "True to search in user agent shadow DOM.",
              "hidden": true
            }
          ],
          "returns": [
            {
              "name": "searchId",
              "type": "string",
              "description": "Unique search session identifier."
            },
            {
              "name": "resultCount",
              "type": "integer",
              "description": "Number of search results."
            }
          ],
          "description": "Searches for a given string in the DOM tree. Use <code>getSearchResults</code> to access search results or <code>cancelSearch</code> to end this search session.",
          "hidden": true
        },
        {
          "name": "pushNodeByPathToFrontend",
          "parameters": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to node in the proprietary format."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node for given path."
            }
          ],
          "description": "Requests that the node is sent to the caller given its path. // FIXME, use XPath",
          "hidden": true
        },
        {
          "name": "querySelector",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to query upon."
            },
            {
              "name": "selector",
              "type": "string",
              "description": "Selector string."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Query selector result."
            }
          ],
          "description": "Executes <code>querySelector</code> on a given node."
        },
        {
          "name": "querySelectorAll",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to query upon."
            },
            {
              "name": "selector",
              "type": "string",
              "description": "Selector string."
            }
          ],
          "returns": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "Query selector result."
            }
          ],
          "description": "Executes <code>querySelectorAll</code> on a given node."
        },
        {
          "name": "redo",
          "description": "Re-does the last undone action.",
          "hidden": true
        },
        {
          "name": "removeAttribute",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the element to remove attribute from."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Name of the attribute to remove."
            }
          ],
          "description": "Removes attribute with given name from an element with given id."
        },
        {
          "name": "removeNode",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to remove."
            }
          ],
          "description": "Removes node with given id."
        },
        {
          "name": "requestChildNodes",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to get children for."
            },
            {
              "name": "depth",
              "type": "integer",
              "optional": true,
              "description": "The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.",
              "hidden": true
            }
          ],
          "description": "Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes</code> events where not only immediate children are retrieved, but all children down to the specified depth."
        },
        {
          "name": "requestNode",
          "parameters": [
            {
              "name": "objectId",
              "$ref": "Runtime.RemoteObjectId",
              "description": "JavaScript object id to convert into node."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Node id for given object."
            }
          ],
          "description": "Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes</code> notifications."
        },
        {
          "name": "resolveNode",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to resolve."
            },
            {
              "name": "objectGroup",
              "type": "string",
              "optional": true,
              "description": "Symbolic group name that can be used to release multiple objects."
            }
          ],
          "returns": [
            {
              "name": "object",
              "$ref": "Runtime.RemoteObject",
              "description": "JavaScript object wrapper for given node."
            }
          ],
          "description": "Resolves JavaScript node object for given node id."
        },
        {
          "name": "setAttributeValue",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the element to set attribute for."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name."
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value."
            }
          ],
          "description": "Sets attribute for an element with given id."
        },
        {
          "name": "setAttributesAsText",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the element to set attributes for."
            },
            {
              "name": "text",
              "type": "string",
              "description": "Text with a number of attributes. Will parse this text using HTML parser."
            },
            {
              "name": "name",
              "type": "string",
              "optional": true,
              "description": "Attribute name to replace with new attributes derived from text in case text parsed successfully."
            }
          ],
          "description": "Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs."
        },
        {
          "name": "setNodeName",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to set name for."
            },
            {
              "name": "name",
              "type": "string",
              "description": "New node's name."
            }
          ],
          "returns": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "New node's id."
            }
          ],
          "description": "Sets node name for a node with given id."
        },
        {
          "name": "setNodeValue",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to set value for."
            },
            {
              "name": "value",
              "type": "string",
              "description": "New node's value."
            }
          ],
          "description": "Sets node value for a node with given id."
        },
        {
          "name": "setOuterHTML",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node to set markup for."
            },
            {
              "name": "outerHTML",
              "type": "string",
              "description": "Outer HTML markup to set."
            }
          ],
          "description": "Sets node HTML markup, returns new node id."
        },
        {
          "name": "undo",
          "description": "Undoes the last performed action.",
          "hidden": true
        }
      ],
      "events": [
        {
          "name": "attributeModified",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name."
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value."
            }
          ],
          "description": "Fired when <code>Element</code>'s attribute is modified."
        },
        {
          "name": "attributeRemoved",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "name",
              "type": "string",
              "description": "A ttribute name."
            }
          ],
          "description": "Fired when <code>Element</code>'s attribute is removed."
        },
        {
          "name": "characterDataModified",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "characterData",
              "type": "string",
              "description": "New text value."
            }
          ],
          "description": "Mirrors <code>DOMCharacterDataModified</code> event."
        },
        {
          "name": "childNodeCountUpdated",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "childNodeCount",
              "type": "integer",
              "description": "New node count."
            }
          ],
          "description": "Fired when <code>Container</code>'s child node count has changed."
        },
        {
          "name": "childNodeInserted",
          "parameters": [
            {
              "name": "parentNodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "previousNodeId",
              "$ref": "NodeId",
              "description": "If of the previous siblint."
            },
            {
              "name": "node",
              "$ref": "Node",
              "description": "Inserted node data."
            }
          ],
          "description": "Mirrors <code>DOMNodeInserted</code> event."
        },
        {
          "name": "childNodeRemoved",
          "parameters": [
            {
              "name": "parentNodeId",
              "$ref": "NodeId",
              "description": "Parent id."
            },
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has been removed."
            }
          ],
          "description": "Mirrors <code>DOMNodeRemoved</code> event."
        },
        {
          "name": "documentUpdated",
          "description": "Fired when <code>Document</code> has been totally updated. Node ids are no longer valid."
        },
        {
          "name": "inlineStyleInvalidated",
          "parameters": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "Ids of the nodes for which the inline styles have been invalidated."
            }
          ],
          "description": "Fired when <code>Element</code>'s inline style is modified via a CSS property modification.",
          "hidden": true
        },
        {
          "name": "setChildNodes",
          "parameters": [
            {
              "name": "parentId",
              "$ref": "NodeId",
              "description": "Parent node id to populate with children."
            },
            {
              "name": "nodes",
              "type": "array",
              "items": {
                "$ref": "Node"
              },
              "description": "Child nodes array."
            }
          ],
          "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids."
        },
        {
          "name": "shadowRootPopped",
          "parameters": [
            {
              "name": "hostId",
              "$ref": "NodeId",
              "description": "Host element id."
            },
            {
              "name": "rootId",
              "$ref": "NodeId",
              "description": "Shadow root id."
            }
          ],
          "description": "Called when shadow root is popped from the element.",
          "hidden": true
        },
        {
          "name": "shadowRootPushed",
          "parameters": [
            {
              "name": "hostId",
              "$ref": "NodeId",
              "description": "Host element id."
            },
            {
              "name": "root",
              "$ref": "Node",
              "description": "Shadow root."
            }
          ],
          "description": "Called when shadow root is pushed into the element.",
          "hidden": true
        }
      ],
      "types": [
        {
          "name": "attributeModified",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name."
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value."
            }
          ],
          "description": "Fired when <code>Element</code>'s attribute is modified."
        },
        {
          "name": "attributeRemoved",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "name",
              "type": "string",
              "description": "A ttribute name."
            }
          ],
          "description": "Fired when <code>Element</code>'s attribute is removed."
        },
        {
          "name": "characterDataModified",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "characterData",
              "type": "string",
              "description": "New text value."
            }
          ],
          "description": "Mirrors <code>DOMCharacterDataModified</code> event."
        },
        {
          "name": "childNodeCountUpdated",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "childNodeCount",
              "type": "integer",
              "description": "New node count."
            }
          ],
          "description": "Fired when <code>Container</code>'s child node count has changed."
        },
        {
          "name": "childNodeInserted",
          "parameters": [
            {
              "name": "parentNodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has changed."
            },
            {
              "name": "previousNodeId",
              "$ref": "NodeId",
              "description": "If of the previous siblint."
            },
            {
              "name": "node",
              "$ref": "Node",
              "description": "Inserted node data."
            }
          ],
          "description": "Mirrors <code>DOMNodeInserted</code> event."
        },
        {
          "name": "childNodeRemoved",
          "parameters": [
            {
              "name": "parentNodeId",
              "$ref": "NodeId",
              "description": "Parent id."
            },
            {
              "name": "nodeId",
              "$ref": "NodeId",
              "description": "Id of the node that has been removed."
            }
          ],
          "description": "Mirrors <code>DOMNodeRemoved</code> event."
        },
        {
          "name": "documentUpdated",
          "description": "Fired when <code>Document</code> has been totally updated. Node ids are no longer valid."
        },
        {
          "name": "inlineStyleInvalidated",
          "parameters": [
            {
              "name": "nodeIds",
              "type": "array",
              "items": {
                "$ref": "NodeId"
              },
              "description": "Ids of the nodes for which the inline styles have been invalidated."
            }
          ],
          "description": "Fired when <code>Element</code>'s inline style is modified via a CSS property modification.",
          "hidden": true
        },
        {
          "name": "setChildNodes",
          "parameters": [
            {
              "name": "parentId",
              "$ref": "NodeId",
              "description": "Parent node id to populate with children."
            },
            {
              "name": "nodes",
              "type": "array",
              "items": {
                "$ref": "Node"
              },
              "description": "Child nodes array."
            }
          ],
          "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids."
        },
        {
          "name": "shadowRootPopped",
          "parameters": [
            {
              "name": "hostId",
              "$ref": "NodeId",
              "description": "Host element id."
            },
            {
              "name": "rootId",
              "$ref": "NodeId",
              "description": "Shadow root id."
            }
          ],
          "description": "Called when shadow root is popped from the element.",
          "hidden": true
        },
        {
          "name": "shadowRootPushed",
          "parameters": [
            {
              "name": "hostId",
              "$ref": "NodeId",
              "description": "Host element id."
            },
            {
              "name": "root",
              "$ref": "Node",
              "description": "Shadow root."
            }
          ],
          "description": "Called when shadow root is pushed into the element.",
          "hidden": true
        }
      ]
    },
    {
      "domain": "DOMDebugger",
      "hidden": false,
      "commands": [
        {
          "name": "removeDOMBreakpoint",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "DOM.NodeId",
              "description": "Identifier of the node to remove breakpoint from."
            },
            {
              "name": "type",
              "$ref": "DOMBreakpointType",
              "description": "Type of the breakpoint to remove."
            }
          ],
          "description": "Removes DOM breakpoint that was set using <code>setDOMBreakpoint</code>."
        },
        {
          "name": "removeEventListenerBreakpoint",
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "description": "Event name."
            },
            {
              "name": "targetName",
              "type": "string",
              "optional": true,
              "description": "EventTarget interface name.",
              "hidden": true
            }
          ],
          "description": "Removes breakpoint on particular DOM event."
        },
        {
          "name": "removeInstrumentationBreakpoint",
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "description": "Instrumentation name to stop on."
            }
          ],
          "description": "Removes breakpoint on particular native event.",
          "hidden": true
        },
        {
          "name": "removeXHRBreakpoint",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "description": "Resource URL substring."
            }
          ],
          "description": "Removes breakpoint from XMLHttpRequest."
        },
        {
          "name": "setDOMBreakpoint",
          "parameters": [
            {
              "name": "nodeId",
              "$ref": "DOM.NodeId",
              "description": "Identifier of the node to set breakpoint on."
            },
            {
              "name": "type",
              "$ref": "DOMBreakpointType",
              "description": "Type of the operation to stop upon."
            }
          ],
          "description": "Sets breakpoint on particular operation with DOM."
        },
        {
          "name": "setEventListenerBreakpoint",
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "description": "DOM Event name to stop on (any DOM event will do)."
            },
            {
              "name": "targetName",
              "type": "string",
              "optional": true,
              "description": "EventTarget interface name to stop on. If equal to <code>\"*\"</code> or not provided, will stop on any EventTarget.",
              "hidden": true
            }
          ],
          "description": "Sets breakpoint on particular DOM event."
        },
        {
          "name": "setInstrumentationBreakpoint",
          "parameters": [
            {
              "name": "eventName",
              "type": "string",
              "description": "Instrumentation name to stop on."
            }
          ],
          "description": "Sets breakpoint on particular native event.",
          "hidden": true
        },
        {
          "name": "setXHRBreakpoint",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "description": "Resource URL substring. All XHRs having this substring in the URL will get stopped upon."
            }
          ],
          "description": "Sets breakpoint on XMLHttpRequest."
        }
      ],
      "events": [],
      "types": []
    },
    {
      "domain": "DOMStorage",
      "hidden": false,
      "commands": [
        {
          "name": "disable",
          "description": "Disables storage tracking, prevents storage events from being sent to the client."
        },
        {
          "name": "enable",
          "description": "Enables storage tracking, storage events will now be delivered to the client."
        },
        {
          "name": "getDOMStorageItems",
          "parameters": [
            {
              "name": "storageId",
              "$ref": "StorageId"
            }
          ],
          "returns": [
            {
              "name": "entries",
              "type": "array",
              "items": {
                "$ref": "Item"
              }
            }
          ]
        },
        {
          "name": "removeDOMStorageItem",
          "parameters": [
            {
              "name": "storageId",
              "$ref": "StorageId"
            },
            {
              "name": "key",
              "type": "string"
            }
          ]
        },
        {
          "name": "setDOMStorageItem",
          "parameters": [
            {
              "name": "storageId",
              "$ref": "StorageId"
            },
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "value",
              "type": "string"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "domStorageItemAdded",
          "parameters": [
            {
              "name": "storageId",
              "$ref": "StorageId"
            },
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "newValue",
              "type": "string"
            }
          ]
        },
        {
          "name": "domStorageItemRemoved",
          "parameters": [
            {
              "name": "storageId",
              "$ref": "StorageId"
            },
            {
              "name": "key",
              "type": "string"
            }
          ]
        },
        {
          "name": "domStorageItemUpdated",
          "parameters": [
            {
              "name": "storageId",
              "$ref": "StorageId"
            },
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "oldValue",
              "type": "string"
            },
            {
              "name": "newValue",
              "type": "string"
            }
          ]
        },
        {
          "name": "domStorageItemsCleared",
          "parameters": [
            {
              "name": "storageId",
              "$ref": "StorageId"
            }
          ]
        }
      ],
      "types": [
        {
          "name": "domStorageItemAdded",
          "parameters": [
            {
              "name": "storageId",
              "$ref": "StorageId"
            },
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "newValue",
              "type": "string"
            }
          ]
        },
        {
          "name": "domStorageItemRemoved",
          "parameters": [
            {
              "name": "storageId",
              "$ref": "StorageId"
            },
            {
              "name": "key",
              "type": "string"
            }
          ]
        },
        {
          "name": "domStorageItemUpdated",
          "parameters": [
            {
              "name": "storageId",
              "$ref": "StorageId"
            },
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "oldValue",
              "type": "string"
            },
            {
              "name": "newValue",
              "type": "string"
            }
          ]
        },
        {
          "name": "domStorageItemsCleared",
          "parameters": [
            {
              "name": "storageId",
              "$ref": "StorageId"
            }
          ]
        }
      ]
    },
    {
      "domain": "Database",
      "hidden": false,
      "commands": [
        {
          "name": "disable",
          "description": "Disables database tracking, prevents database events from being sent to the client."
        },
        {
          "name": "enable",
          "description": "Enables database tracking, database events will now be delivered to the client."
        },
        {
          "name": "executeSQL",
          "async": true,
          "parameters": [
            {
              "name": "databaseId",
              "$ref": "DatabaseId"
            },
            {
              "name": "query",
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "columnNames",
              "type": "array",
              "optional": true,
              "items": {
                "type": "string"
              }
            },
            {
              "name": "values",
              "type": "array",
              "optional": true,
              "items": {
                "type": "any"
              }
            },
            {
              "name": "sqlError",
              "$ref": "Error",
              "optional": true
            }
          ]
        },
        {
          "name": "getDatabaseTableNames",
          "parameters": [
            {
              "name": "databaseId",
              "$ref": "DatabaseId"
            }
          ],
          "returns": [
            {
              "name": "tableNames",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        }
      ],
      "events": [
        {
          "name": "addDatabase",
          "parameters": [
            {
              "name": "database",
              "$ref": "Database"
            }
          ]
        }
      ],
      "types": [
        {
          "name": "addDatabase",
          "parameters": [
            {
              "name": "database",
              "$ref": "Database"
            }
          ]
        }
      ]
    },
    {
      "domain": "Inspector",
      "hidden": false,
      "commands": [
        {
          "name": "disable",
          "description": "Disables inspector domain notifications.",
          "handlers": [
            "browser"
          ]
        },
        {
          "name": "enable",
          "description": "Enables inspector domain notifications.",
          "handlers": [
            "browser"
          ]
        }
      ],
      "events": [
        {
          "name": "detached",
          "description": "Fired when remote debugging connection is about to be terminated. Contains detach reason.",
          "parameters": [
            {
              "name": "reason",
              "type": "string",
              "description": "The reason why connection has been terminated."
            }
          ],
          "handlers": [
            "browser"
          ]
        },
        {
          "name": "targetCrashed",
          "description": "Fired when debugging target has crashed",
          "handlers": [
            "browser"
          ]
        }
      ],
      "types": [
        {
          "name": "detached",
          "description": "Fired when remote debugging connection is about to be terminated. Contains detach reason.",
          "parameters": [
            {
              "name": "reason",
              "type": "string",
              "description": "The reason why connection has been terminated."
            }
          ],
          "handlers": [
            "browser"
          ]
        },
        {
          "name": "targetCrashed",
          "description": "Fired when debugging target has crashed",
          "handlers": [
            "browser"
          ]
        }
      ]
    },
    {
      "domain": "LayerTree",
      "hidden": false,
      "commands": [
        {
          "name": "disable",
          "description": "Disables compositing tree inspection."
        },
        {
          "name": "enable",
          "description": "Enables compositing tree inspection."
        }
      ],
      "events": [
        {
          "name": "layerTreeDidChange",
          "parameters": [
            {
              "name": "layers",
              "type": "array",
              "items": {
                "$ref": "Layer"
              },
              "optional": true,
              "description": "Layer tree, absent if not in the comspositing mode."
            }
          ]
        }
      ],
      "types": [
        {
          "name": "layerTreeDidChange",
          "parameters": [
            {
              "name": "layers",
              "type": "array",
              "items": {
                "$ref": "Layer"
              },
              "optional": true,
              "description": "Layer tree, absent if not in the comspositing mode."
            }
          ]
        }
      ]
    },
    {
      "domain": "Network",
      "hidden": false,
      "commands": [
        {
          "name": "disable",
          "description": "Disables network tracking, prevents network events from being sent to the client."
        },
        {
          "name": "enable",
          "description": "Enables network tracking, network events will now be delivered to the client.",
          "parameters": [
            {
              "name": "maxTotalBufferSize",
              "type": "integer",
              "optional": true,
              "hidden": true,
              "description": "Buffer size in bytes to use when preserving network payloads (XHRs, etc)."
            },
            {
              "name": "maxResourceBufferSize",
              "type": "integer",
              "optional": true,
              "hidden": true,
              "description": "Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc)."
            }
          ]
        },
        {
          "name": "getResponseBody",
          "async": true,
          "description": "Returns content served for the given request.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Identifier of the network request to get content for."
            }
          ],
          "returns": [
            {
              "name": "body",
              "type": "string",
              "description": "Response body."
            },
            {
              "name": "base64Encoded",
              "type": "boolean",
              "description": "True, if content was sent as base64."
            }
          ]
        },
        {
          "name": "setCacheDisabled",
          "parameters": [
            {
              "name": "cacheDisabled",
              "type": "boolean",
              "description": "Cache disabled state."
            }
          ],
          "description": "Toggles ignoring cache for each request. If <code>true</code>, cache will not be used."
        },
        {
          "name": "setExtraHTTPHeaders",
          "description": "Specifies whether to always send extra HTTP headers with the requests from this page.",
          "parameters": [
            {
              "name": "headers",
              "$ref": "Headers",
              "description": "Map with extra HTTP headers."
            }
          ]
        }
      ],
      "events": [
        {
          "name": "dataReceived",
          "description": "Fired when data chunk was received over the network.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "dataLength",
              "type": "integer",
              "description": "Data chunk length."
            },
            {
              "name": "encodedDataLength",
              "type": "integer",
              "description": "Actual bytes received (might be less than dataLength for compressed encodings)."
            }
          ]
        },
        {
          "name": "loadingFailed",
          "description": "Fired when HTTP request has failed to load.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "type",
              "$ref": "Page.ResourceType",
              "description": "Resource type."
            },
            {
              "name": "errorText",
              "type": "string",
              "description": "User friendly error message."
            },
            {
              "name": "canceled",
              "type": "boolean",
              "optional": true,
              "description": "True if loading was canceled."
            },
            {
              "name": "blockedReason",
              "$ref": "BlockedReason",
              "optional": true,
              "description": "The reason why loading was blocked, if any.",
              "hidden": true
            }
          ]
        },
        {
          "name": "loadingFinished",
          "description": "Fired when HTTP request has finished loading.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "encodedDataLength",
              "type": "number",
              "description": "Total number of bytes received for this request."
            }
          ]
        },
        {
          "name": "requestServedFromCache",
          "description": "Fired if request ended up loading from cache.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            }
          ]
        },
        {
          "name": "requestWillBeSent",
          "description": "Fired when page is about to send HTTP request.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "frameId",
              "$ref": "Page.FrameId",
              "description": "Frame identifier.",
              "hidden": true
            },
            {
              "name": "loaderId",
              "$ref": "LoaderId",
              "description": "Loader identifier."
            },
            {
              "name": "documentURL",
              "type": "string",
              "description": "URL of the document this request is loaded for."
            },
            {
              "name": "request",
              "$ref": "Request",
              "description": "Request data."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "wallTime",
              "$ref": "Timestamp",
              "hidden": true,
              "description": "UTC Timestamp."
            },
            {
              "name": "initiator",
              "$ref": "Initiator",
              "description": "Request initiator."
            },
            {
              "name": "redirectResponse",
              "optional": true,
              "$ref": "Response",
              "description": "Redirect response data."
            },
            {
              "name": "type",
              "$ref": "Page.ResourceType",
              "optional": true,
              "hidden": true,
              "description": "Type of this resource."
            }
          ]
        },
        {
          "name": "responseReceived",
          "description": "Fired when HTTP response is available.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "frameId",
              "$ref": "Page.FrameId",
              "description": "Frame identifier.",
              "hidden": true
            },
            {
              "name": "loaderId",
              "$ref": "LoaderId",
              "description": "Loader identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "type",
              "$ref": "Page.ResourceType",
              "description": "Resource type."
            },
            {
              "name": "response",
              "$ref": "Response",
              "description": "Response data."
            }
          ]
        },
        {
          "name": "webSocketClosed",
          "description": "Fired when WebSocket is closed.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            }
          ],
          "hidden": true
        },
        {
          "name": "webSocketCreated",
          "description": "Fired upon WebSocket creation.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "url",
              "type": "string",
              "description": "WebSocket request URL."
            },
            {
              "name": "initiator",
              "$ref": "Initiator",
              "optional": true,
              "description": "Request initiator."
            }
          ],
          "hidden": true
        },
        {
          "name": "webSocketFrameError",
          "description": "Fired when WebSocket frame error occurs.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "WebSocket frame error message."
            }
          ],
          "hidden": true
        },
        {
          "name": "webSocketFrameReceived",
          "description": "Fired when WebSocket frame is received.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "response",
              "$ref": "WebSocketFrame",
              "description": "WebSocket response data."
            }
          ],
          "hidden": true
        },
        {
          "name": "webSocketFrameSent",
          "description": "Fired when WebSocket frame is sent.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "response",
              "$ref": "WebSocketFrame",
              "description": "WebSocket response data."
            }
          ],
          "hidden": true
        },
        {
          "name": "webSocketHandshakeResponseReceived",
          "description": "Fired when WebSocket handshake response becomes available.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "response",
              "$ref": "WebSocketResponse",
              "description": "WebSocket response data."
            }
          ],
          "hidden": true
        },
        {
          "name": "webSocketWillSendHandshakeRequest",
          "description": "Fired when WebSocket is about to initiate handshake.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "wallTime",
              "$ref": "Timestamp",
              "hidden": true,
              "description": "UTC Timestamp."
            },
            {
              "name": "request",
              "$ref": "WebSocketRequest",
              "description": "WebSocket request data."
            }
          ],
          "hidden": true
        }
      ],
      "types": [
        {
          "name": "dataReceived",
          "description": "Fired when data chunk was received over the network.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "dataLength",
              "type": "integer",
              "description": "Data chunk length."
            },
            {
              "name": "encodedDataLength",
              "type": "integer",
              "description": "Actual bytes received (might be less than dataLength for compressed encodings)."
            }
          ]
        },
        {
          "name": "loadingFailed",
          "description": "Fired when HTTP request has failed to load.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "type",
              "$ref": "Page.ResourceType",
              "description": "Resource type."
            },
            {
              "name": "errorText",
              "type": "string",
              "description": "User friendly error message."
            },
            {
              "name": "canceled",
              "type": "boolean",
              "optional": true,
              "description": "True if loading was canceled."
            },
            {
              "name": "blockedReason",
              "$ref": "BlockedReason",
              "optional": true,
              "description": "The reason why loading was blocked, if any.",
              "hidden": true
            }
          ]
        },
        {
          "name": "loadingFinished",
          "description": "Fired when HTTP request has finished loading.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "encodedDataLength",
              "type": "number",
              "description": "Total number of bytes received for this request."
            }
          ]
        },
        {
          "name": "requestServedFromCache",
          "description": "Fired if request ended up loading from cache.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            }
          ]
        },
        {
          "name": "requestWillBeSent",
          "description": "Fired when page is about to send HTTP request.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "frameId",
              "$ref": "Page.FrameId",
              "description": "Frame identifier.",
              "hidden": true
            },
            {
              "name": "loaderId",
              "$ref": "LoaderId",
              "description": "Loader identifier."
            },
            {
              "name": "documentURL",
              "type": "string",
              "description": "URL of the document this request is loaded for."
            },
            {
              "name": "request",
              "$ref": "Request",
              "description": "Request data."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "wallTime",
              "$ref": "Timestamp",
              "hidden": true,
              "description": "UTC Timestamp."
            },
            {
              "name": "initiator",
              "$ref": "Initiator",
              "description": "Request initiator."
            },
            {
              "name": "redirectResponse",
              "optional": true,
              "$ref": "Response",
              "description": "Redirect response data."
            },
            {
              "name": "type",
              "$ref": "Page.ResourceType",
              "optional": true,
              "hidden": true,
              "description": "Type of this resource."
            }
          ]
        },
        {
          "name": "responseReceived",
          "description": "Fired when HTTP response is available.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "frameId",
              "$ref": "Page.FrameId",
              "description": "Frame identifier.",
              "hidden": true
            },
            {
              "name": "loaderId",
              "$ref": "LoaderId",
              "description": "Loader identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "type",
              "$ref": "Page.ResourceType",
              "description": "Resource type."
            },
            {
              "name": "response",
              "$ref": "Response",
              "description": "Response data."
            }
          ]
        },
        {
          "name": "webSocketClosed",
          "description": "Fired when WebSocket is closed.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            }
          ],
          "hidden": true
        },
        {
          "name": "webSocketCreated",
          "description": "Fired upon WebSocket creation.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "url",
              "type": "string",
              "description": "WebSocket request URL."
            },
            {
              "name": "initiator",
              "$ref": "Initiator",
              "optional": true,
              "description": "Request initiator."
            }
          ],
          "hidden": true
        },
        {
          "name": "webSocketFrameError",
          "description": "Fired when WebSocket frame error occurs.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "errorMessage",
              "type": "string",
              "description": "WebSocket frame error message."
            }
          ],
          "hidden": true
        },
        {
          "name": "webSocketFrameReceived",
          "description": "Fired when WebSocket frame is received.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "response",
              "$ref": "WebSocketFrame",
              "description": "WebSocket response data."
            }
          ],
          "hidden": true
        },
        {
          "name": "webSocketFrameSent",
          "description": "Fired when WebSocket frame is sent.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "response",
              "$ref": "WebSocketFrame",
              "description": "WebSocket response data."
            }
          ],
          "hidden": true
        },
        {
          "name": "webSocketHandshakeResponseReceived",
          "description": "Fired when WebSocket handshake response becomes available.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "response",
              "$ref": "WebSocketResponse",
              "description": "WebSocket response data."
            }
          ],
          "hidden": true
        },
        {
          "name": "webSocketWillSendHandshakeRequest",
          "description": "Fired when WebSocket is about to initiate handshake.",
          "parameters": [
            {
              "name": "requestId",
              "$ref": "RequestId",
              "description": "Request identifier."
            },
            {
              "name": "timestamp",
              "$ref": "Timestamp",
              "description": "Timestamp."
            },
            {
              "name": "wallTime",
              "$ref": "Timestamp",
              "hidden": true,
              "description": "UTC Timestamp."
            },
            {
              "name": "request",
              "$ref": "WebSocketRequest",
              "description": "WebSocket request data."
            }
          ],
          "hidden": true
        }
      ]
    },
    {
      "domain": "Page",
      "hidden": false,
      "commands": [
        {
          "name": "addScriptToEvaluateOnLoad",
          "parameters": [
            {
              "name": "scriptSource",
              "type": "string"
            }
          ],
          "returns": [
            {
              "name": "identifier",
              "$ref": "ScriptIdentifier",
              "description": "Identifier of the added script."
            }
          ],
          "hidden": true
        },
        {
          "name": "deleteCookie",
          "parameters": [
            {
              "name": "cookieName",
              "type": "string",
              "description": "Name of the cookie to remove."
            },
            {
              "name": "url",
              "type": "string",
              "description": "URL to match cooke domain and path."
            }
          ],
          "description": "Deletes browser cookie with given name, domain and path.",
          "handlers": [
            "browser"
          ],
          "async": true,
          "hidden": true,
          "redirect": "Network"
        },
        {
          "name": "disable",
          "description": "Disables page domain notifications.",
          "handlers": [
            "browser",
            "renderer"
          ]
        },
        {
          "name": "enable",
          "description": "Enables page domain notifications.",
          "handlers": [
            "browser",
            "renderer"
          ]
        },
        {
          "name": "getCookies",
          "returns": [
            {
              "name": "cookies",
              "type": "array",
              "items": {
                "$ref": "Network.Cookie"
              },
              "description": "Array of cookie objects."
            }
          ],
          "description": "Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field.",
          "handlers": [
            "browser"
          ],
          "async": true,
          "hidden": true,
          "redirect": "Network"
        },
        {
          "name": "getResourceContent",
          "async": true,
          "description": "Returns content of the given resource.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Frame id to get resource for."
            },
            {
              "name": "url",
              "type": "string",
              "description": "URL of the resource to get content for."
            }
          ],
          "returns": [
            {
              "name": "content",
              "type": "string",
              "description": "Resource content."
            },
            {
              "name": "base64Encoded",
              "type": "boolean",
              "description": "True, if content was served as base64."
            }
          ],
          "hidden": true
        },
        {
          "name": "getResourceTree",
          "description": "Returns present frame / resource tree structure.",
          "returns": [
            {
              "name": "frameTree",
              "$ref": "FrameResourceTree",
              "description": "Present frame / resource tree structure."
            }
          ],
          "hidden": true
        },
        {
          "name": "handleJavaScriptDialog",
          "description": "Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).",
          "parameters": [
            {
              "name": "accept",
              "type": "boolean",
              "description": "Whether to accept or dismiss the dialog."
            },
            {
              "name": "promptText",
              "type": "string",
              "optional": true,
              "description": "The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog."
            }
          ],
          "hidden": true,
          "handlers": [
            "browser"
          ]
        },
        {
          "name": "navigate",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to navigate the page to."
            }
          ],
          "returns": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "hidden": true,
              "description": "Frame id that will be navigated."
            }
          ],
          "description": "Navigates current page to the given URL.",
          "handlers": [
            "browser",
            "renderer"
          ]
        },
        {
          "name": "reload",
          "parameters": [
            {
              "name": "ignoreCache",
              "type": "boolean",
              "optional": true,
              "description": "If true, browser cache is ignored (as if the user pressed Shift+refresh)."
            },
            {
              "name": "scriptToEvaluateOnLoad",
              "type": "string",
              "optional": true,
              "description": "If set, the script will be injected into all frames of the inspected page after reload."
            }
          ],
          "description": "Reloads given page optionally ignoring the cache.",
          "handlers": [
            "browser",
            "renderer"
          ]
        },
        {
          "name": "removeScriptToEvaluateOnLoad",
          "parameters": [
            {
              "name": "identifier",
              "$ref": "ScriptIdentifier"
            }
          ],
          "hidden": true
        },
        {
          "name": "searchInResource",
          "async": true,
          "description": "Searches for given string in resource content.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Frame id for resource to search in."
            },
            {
              "name": "url",
              "type": "string",
              "description": "URL of the resource to search in."
            },
            {
              "name": "query",
              "type": "string",
              "description": "String to search for."
            },
            {
              "name": "caseSensitive",
              "type": "boolean",
              "optional": true,
              "description": "If true, search is case sensitive."
            },
            {
              "name": "isRegex",
              "type": "boolean",
              "optional": true,
              "description": "If true, treats string parameter as regex."
            }
          ],
          "returns": [
            {
              "name": "result",
              "type": "array",
              "items": {
                "$ref": "Debugger.SearchMatch"
              },
              "description": "List of search matches."
            }
          ],
          "hidden": true
        },
        {
          "name": "setDocumentContent",
          "description": "Sets given markup as the document's HTML.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Frame id to set HTML for."
            },
            {
              "name": "html",
              "type": "string",
              "description": "HTML content to set."
            }
          ],
          "hidden": true
        },
        {
          "name": "setTouchEmulationEnabled",
          "parameters": [
            {
              "name": "enabled",
              "type": "boolean",
              "description": "Whether the touch event emulation should be enabled."
            },
            {
              "name": "configuration",
              "type": "string",
              "enum": [
                "mobile",
                "desktop"
              ],
              "optional": true,
              "description": "Touch/gesture events configuration. Default: current platform."
            }
          ],
          "description": "Toggles mouse event-based touch event emulation.",
          "hidden": true,
          "redirect": "Emulation",
          "handlers": [
            "browser",
            "renderer"
          ]
        }
      ],
      "events": [
        {
          "name": "domContentEventFired",
          "parameters": [
            {
              "name": "timestamp",
              "type": "number"
            }
          ]
        },
        {
          "name": "frameClearedScheduledNavigation",
          "description": "Fired when frame no longer has a scheduled navigation.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Id of the frame that has cleared its scheduled navigation."
            }
          ],
          "hidden": true
        },
        {
          "name": "frameDetached",
          "description": "Fired when frame has been detached from its parent.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Id of the frame that has been detached."
            }
          ]
        },
        {
          "name": "frameNavigated",
          "description": "Fired once navigation of the frame has completed. Frame is now associated with the new loader.",
          "parameters": [
            {
              "name": "frame",
              "$ref": "Frame",
              "description": "Frame object."
            }
          ]
        },
        {
          "name": "frameScheduledNavigation",
          "description": "Fired when frame schedules a potential navigation.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Id of the frame that has scheduled a navigation."
            },
            {
              "name": "delay",
              "type": "number",
              "description": "Delay (in seconds) until the navigation is scheduled to begin. The navigation is not guaranteed to start."
            }
          ],
          "hidden": true
        },
        {
          "name": "frameStartedLoading",
          "description": "Fired when frame has started loading.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Id of the frame that has started loading."
            }
          ],
          "hidden": true
        },
        {
          "name": "frameStoppedLoading",
          "description": "Fired when frame has stopped loading.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Id of the frame that has stopped loading."
            }
          ],
          "hidden": true
        },
        {
          "name": "javascriptDialogClosed",
          "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed.",
          "parameters": [
            {
              "name": "result",
              "type": "boolean",
              "description": "Whether dialog was confirmed."
            }
          ],
          "hidden": true
        },
        {
          "name": "javascriptDialogOpening",
          "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open.",
          "parameters": [
            {
              "name": "message",
              "type": "string",
              "description": "Message that will be displayed by the dialog."
            },
            {
              "name": "type",
              "$ref": "DialogType",
              "description": "Dialog type."
            }
          ],
          "hidden": true
        },
        {
          "name": "loadEventFired",
          "parameters": [
            {
              "name": "timestamp",
              "type": "number"
            }
          ]
        }
      ],
      "types": [
        {
          "name": "domContentEventFired",
          "parameters": [
            {
              "name": "timestamp",
              "type": "number"
            }
          ]
        },
        {
          "name": "frameClearedScheduledNavigation",
          "description": "Fired when frame no longer has a scheduled navigation.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Id of the frame that has cleared its scheduled navigation."
            }
          ],
          "hidden": true
        },
        {
          "name": "frameDetached",
          "description": "Fired when frame has been detached from its parent.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Id of the frame that has been detached."
            }
          ]
        },
        {
          "name": "frameNavigated",
          "description": "Fired once navigation of the frame has completed. Frame is now associated with the new loader.",
          "parameters": [
            {
              "name": "frame",
              "$ref": "Frame",
              "description": "Frame object."
            }
          ]
        },
        {
          "name": "frameScheduledNavigation",
          "description": "Fired when frame schedules a potential navigation.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Id of the frame that has scheduled a navigation."
            },
            {
              "name": "delay",
              "type": "number",
              "description": "Delay (in seconds) until the navigation is scheduled to begin. The navigation is not guaranteed to start."
            }
          ],
          "hidden": true
        },
        {
          "name": "frameStartedLoading",
          "description": "Fired when frame has started loading.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Id of the frame that has started loading."
            }
          ],
          "hidden": true
        },
        {
          "name": "frameStoppedLoading",
          "description": "Fired when frame has stopped loading.",
          "parameters": [
            {
              "name": "frameId",
              "$ref": "FrameId",
              "description": "Id of the frame that has stopped loading."
            }
          ],
          "hidden": true
        },
        {
          "name": "javascriptDialogClosed",
          "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed.",
          "parameters": [
            {
              "name": "result",
              "type": "boolean",
              "description": "Whether dialog was confirmed."
            }
          ],
          "hidden": true
        },
        {
          "name": "javascriptDialogOpening",
          "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open.",
          "parameters": [
            {
              "name": "message",
              "type": "string",
              "description": "Message that will be displayed by the dialog."
            },
            {
              "name": "type",
              "$ref": "DialogType",
              "description": "Dialog type."
            }
          ],
          "hidden": true
        },
        {
          "name": "loadEventFired",
          "parameters": [
            {
              "name": "timestamp",
              "type": "number"
            }
          ]
        }
      ]
    }
  ]
}